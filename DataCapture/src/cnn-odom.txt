class My_Model(nn.Module):
    def __init__(self, input_dim):
        super(My_Model, self).__init__()
        
        #apply image argumention
        self.transforms = nn.Sequential(
            T.RandomCrop(96),
            #T.RandomRotation((-15,15)),
            T.ColorJitter([0.1,0.8],[0.1,0.8],[0.1,0.8]),
            T.RandomGrayscale(0.2),
            T.GaussianBlur((3,3)),
            T.ConvertImageDtype(torch.float),
            T.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
        )

        #image CNN layers
        self.cnn = nn.Sequential(
            nn.Conv2d(3, 24, 5, 1, 1), # [64, 96, 96]
            #nn.BatchNorm2d(24),
            nn.ReLU(),
            nn.MaxPool2d(2, 2, 0),      # [64, 48, 48]

            nn.Conv2d(24, 36, 5, 1, 1), # [128, 48, 48]
            #nn.BatchNorm2d(36),
            nn.ReLU(),
            nn.MaxPool2d(2, 2, 0),      # [128, 24, 24]
            
            nn.Conv2d(36, 48, 3, 1, 1), # [128, 48, 48]
            #nn.BatchNorm2d(48),
            nn.ReLU(),
            nn.MaxPool2d(2, 2, 0),      # [128, 12, 12]
            
            nn.Conv2d(48, 96, 3, 1, 1), # [128, 12, 12]
            #nn.BatchNorm2d(96),
            nn.ReLU(),
            nn.MaxPool2d(2, 2, 0),      # [128, 6, 6]
        )
        
        #image softmax layer
        self.fc = nn.Sequential(
        nn.Linear(96*5*5,100),
        nn.ReLU(),
        nn.Linear(100, 50),
        nn.ReLU(),
        nn.Linear(50, 10),
        )
        #odometry fully connected layer
        self.odomlayers = nn.Sequential(
            nn.Linear(3, 24),
            nn.ReLU(),
            nn.Linear(24, 10),
        )
        #recurrent layers
        #self.rnn=nn.RNN(input_size=20,hidden_size=10,num_layers=3,batch_first=True)
        
        self.lstm = nn.LSTM(input_size=60, hidden_size=60, num_layers=20,batch_first=True)
        
        #the last fully connected layer
        self.lastlayers = nn.Sequential(
            nn.Linear(20, 2), #return 2
        )
        


    def forward(self, x):